/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Calculates the required size of the filter in bits
 * ```rust
 * filter_size = - (item_count * lg(false_positive_rate)) / (lg(2)^2)
 * ```
 */
export function calculateFilterSize(itemCount: number, falsePositiveRate: number): number
/**
 * Calculates the optimal number of hash functions to use
 * ```rust
 * hash_fns_required = (bits / item_count) * ln(2)
 * ```
 */
export function calculateRequiredHashFunctions(bits: bigint, itemsCount: number): number
export class Zoomies {
  /**
   * Create a new bloom filter with the given number of items and false positive rate
   * ```rust
   * let bloom_filter = BloomFilter::new(100, 0.01); // 100 items, 1% false positive rate
   * ```
   */
  constructor(itemCount: number, falsePositiveRate: number)
  static newFromCompiledFilter(bitFilter: Buffer, hashFns: number): Zoomies
  /** Insert an address into the filter */
  insertAddress(item: string): void
  /**
   * Query the filter for an address
   * ```ts
   * const bloomFilter = new Zoomies(100, 0.01);
   * bloomFilter.insertAddress('0x1234');
   * bloomFilter.queryAddress('0x1234'); // true
   * bloomFilter.queryAddress('0x5678'); // false
   * ```
   */
  queryAddress(item: string): boolean
  extractCompiledFilter(): Buffer
  getHashFns(): number
}
